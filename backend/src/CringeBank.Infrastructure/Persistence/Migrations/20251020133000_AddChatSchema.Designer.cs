// <auto-generated />
using System;
using CringeBank.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CringeBank.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CringeBankDbContext))]
    [Migration("20251020133000_AddChatSchema")]
    partial class AddChatSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cringebank")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthDeviceToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("platform");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Token")
                        .IsUnique()
                        .HasDatabaseName("UX_DeviceTokens_User_Token");

                    b.ToTable("DeviceTokens", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthFollow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("FolloweeUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("followee_user_id");

                    b.Property<long>("FollowerUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("follower_user_id");

                    b.HasKey("Id");

                    b.HasIndex("FolloweeUserId", "CreatedAt")
                        .HasDatabaseName("IX_Follows_Followee_CreatedAt");

                    b.HasIndex("FollowerUserId", "FolloweeUserId")
                        .IsUnique()
                        .HasDatabaseName("UX_Follows_Follower_Followee");

                    b.ToTable("Follows", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthLoginEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Channel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("login")
                        .HasColumnName("channel");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("DeviceIdHash")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("device_id_hash");

                    b.Property<DateTime>("EventAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("event_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("identifier");

                    b.Property<bool>("IsTrustedDevice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_trusted_device");

                    b.Property<string>("IpHash")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ip_hash");

                    b.Property<string>("Locale")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("locale");

                    b.Property<bool>("RememberMe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("remember_me");

                    b.Property<bool>("RequiresDeviceVerification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("requires_device_verification");

                    b.Property<string>("Result")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("success")
                        .HasColumnName("result");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue("unknown")
                        .HasColumnName("source");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("time_zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("user_agent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "EventAtUtc")
                        .HasDatabaseName("IX_LoginEvents_User_EventAt");

                    b.ToTable("LoginEvents", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthProvider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("sql")
                        .HasColumnName("auth_provider");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email_normalized");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("last_login_at");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(128)")
                        .HasColumnName("password_salt");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("phone");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("public_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("username");

                    b.Property<string>("UsernameNormalized")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("username_normalized");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmailNormalized")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_EmailNormalized");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("UsernameNormalized")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UsernameNormalized");

                    b.ToTable("Users", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BlockedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("blocked_user_id");

                    b.Property<long>("BlockerUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("blocker_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId")
                        .HasDatabaseName("IX_UserBlocks_BlockedUserId");

                    b.HasIndex("BlockerUserId", "BlockedUserId")
                        .IsUnique()
                        .HasDatabaseName("UX_UserBlocks_Blocker_Blocked");

                    b.ToTable("UserBlocks", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("banner_url");

                    b.Property<string>("Bio")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Location")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("location");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("UK_UserProfiles_UserId");

                    b.ToTable("UserProfiles", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserSecurity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("LastPasswordResetAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("last_password_reset_at");

                    b.Property<DateTime?>("MagicCodeExpiresAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("magic_code_expires_at");

                    b.Property<byte[]>("MagicCodeHash")
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("magic_code_hash");

                    b.Property<bool>("OtpEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("otp_enabled");

                    b.Property<byte[]>("OtpSecret")
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("otp_secret");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<byte[]>("RefreshTokenHash")
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("refresh_token_hash");

                    b.HasKey("UserId");

                    b.ToTable("UserSecurity", "auth");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Escrow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountGold")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("RefundedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ReleasedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Escrows", "cringebank");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CanceledAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("CommissionGold")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("CompletedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("PriceGold")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SellerType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<decimal>("TotalGold")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Status");

                    b.HasIndex("BuyerId", "Status");

                    b.HasIndex("SellerId", "Status");

                    b.ToTable("Orders", "cringebank");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal>("PriceGold")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SellerType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("SellerType", "Category");

                    b.ToTable("Products", "cringebank");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "SortOrder")
                        .IsUnique();

                    b.ToTable("ProductImages", "cringebank");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClaimsVersion")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DisabledAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLoginAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastSeenAppVersion")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("LastSyncedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[DeletedAtUtc] IS NULL");

                    b.HasIndex("FirebaseUid")
                        .IsUnique();

                    b.HasIndex("Status", "LastSyncedAtUtc");

                    b.ToTable("Users", "cringebank");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("GoldBalance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("OwnerKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OwnerKey", "OwnerType")
                        .IsUnique();

                    b.ToTable("Wallets", "cringebank");
                });

            modelBuilder.Entity("CringeBank.Domain.Outbox.Entities.OutboxEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAtUtc")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("processed_at");

                    b.Property<int>("Retries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("retries")
                        .HasDefaultValue(0);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("status")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("topic");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_OutboxEvents_Status");

                    b.HasIndex("Status", "CreatedAtUtc")
                        .HasDatabaseName("IX_OutboxEvents_Status_CreatedAt");

                    b.ToTable("Events", "outbox");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialCommentLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CommentId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_CommentLikes_Comment_User");

                    b.ToTable("CommentLikes", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CommentsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comments_count")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleted_at");

                    b.Property<int>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likes_count")
                        .HasDefaultValue(0);

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("public_id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("SavesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("saves_count")
                        .HasDefaultValue(0);

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("text");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<byte>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("visibility")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt", "Id")
                        .HasDatabaseName("IX_Posts_CreatedAt_Id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_Posts_User_CreatedAt");

                    b.ToTable("Posts", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleted_at");

                    b.Property<int>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("like_count")
                        .HasDefaultValue(0);

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_comment_id");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "CreatedAt")
                        .HasDatabaseName("IX_PostComments_Post_CreatedAt");

                    b.ToTable("PostComments", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_PostLikes_Post_User");

                    b.ToTable("PostLikes", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<string>("Mime")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("mime");

                    b.Property<byte>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("order_index")
                        .HasDefaultValue((byte)0);

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostMedia", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostSave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_PostSaves_Post_User");

                    b.ToTable("PostSaves", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostTag", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", "social");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthDeviceToken", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("DeviceTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthLoginEvent", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("LoginEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthFollow", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "Followee")
                        .WithMany("Followers")
                        .HasForeignKey("FolloweeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserBlock", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "Blocked")
                        .WithMany("BlocksReceived")
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "Blocker")
                        .WithMany("BlocksInitiated")
                        .HasForeignKey("BlockerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserProfile", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("CringeBank.Domain.Auth.Entities.AuthUserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserRole", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUserSecurity", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithOne("Security")
                        .HasForeignKey("CringeBank.Domain.Auth.Entities.AuthUserSecurity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Escrow", b =>
                {
                    b.HasOne("CringeBank.Domain.Entities.Order", "Order")
                        .WithOne("Escrow")
                        .HasForeignKey("CringeBank.Domain.Entities.Escrow", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Order", b =>
                {
                    b.HasOne("CringeBank.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("CringeBank.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialCommentLike", b =>
                {
                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPostComment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPost", b =>
                {
                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostComment", b =>
                {
                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPostComment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostLike", b =>
                {
                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPost", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostMedia", b =>
                {
                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPost", "Post")
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostSave", b =>
                {
                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPost", "Post")
                        .WithMany("Saves")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Auth.Entities.AuthUser", "User")
                        .WithMany("PostSaves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostTag", b =>
                {
                    b.HasOne("CringeBank.Domain.Social.Entities.SocialPost", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CringeBank.Domain.Social.Entities.SocialTag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CringeBank.Domain.Auth.Entities.AuthUser", b =>
                {
                    b.Navigation("BlocksInitiated");

                    b.Navigation("BlocksReceived");

                    b.Navigation("CommentLikes");

                    b.Navigation("DeviceTokens");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("LoginEvents");

                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostSaves");

                    b.Navigation("Posts");

                    b.Navigation("Profile");

                    b.Navigation("Security");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Order", b =>
                {
                    b.Navigation("Escrow");
                });

            modelBuilder.Entity("CringeBank.Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Media");

                    b.Navigation("Saves");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialPostComment", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CringeBank.Domain.Social.Entities.SocialTag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
