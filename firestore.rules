rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Kullanıcı profilleri
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Entry koleksiyonu
    match /cringe_entries/{entryId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Yarışmalar ve diğer herkese açık veriler
    match /competitions/{document=**} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    match /email_otps/{emailId} {
      function otpDataIsValid(data) {
        return data.keys().hasOnly([
              'email',
              'hash',
              'expiresAt',
              'createdAt',
              'lastAttemptAt',
              'attempts'
            ]) &&
          data.email is string &&
          data.email.lower() == data.email &&
          data.email == emailId &&
          data.hash is string &&
          data.expiresAt is timestamp &&
          (!data.keys().hasAny(['attempts']) || (data.attempts is int && data.attempts >= 0)) &&
          (!data.keys().hasAny(['lastAttemptAt']) ||
            data.lastAttemptAt == null || data.lastAttemptAt is timestamp) &&
          (!data.keys().hasAny(['createdAt']) ||
            data.createdAt == null || data.createdAt is timestamp);
      }

      allow create: if otpDataIsValid(request.resource.data);

      allow read: if resource.data.expiresAt is timestamp &&
        request.time <= resource.data.expiresAt + duration.value(1, 'hours');

      allow update: if otpDataIsValid(request.resource.data);

      allow delete: if true;
    }

    match /leaderboard/{document=**} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /trade_proposals/{proposalId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() &&
        (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
    }

    match /user_activity/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    match /auth_logs/{document=**} {
      allow create: if isSignedIn() || request.resource.data.userId == null;
      allow read, update, delete: if false;
    }

    match /settings/{document=**} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // Diğer tüm koleksiyonlar için varsayılan
    match /{document=**} {
      allow read, write: if isSignedIn();
    }
  }
}