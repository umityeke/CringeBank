rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isFollowerCountAdjustment(userId) {
      let existing = resource.data.followersCount;
      let currentCount = existing is int ? existing : 0;
      let nextCount = request.resource.data.followersCount;

      return isSignedIn()
        && request.auth.uid != userId
        && request.resource.data.keys().hasAny(['followersCount'])
        && resource.data.diff(request.resource.data).changedKeys().hasOnly(['followersCount'])
        && nextCount is int
        && (
          nextCount == currentCount + 1 ||
          (currentCount > 0 && nextCount == currentCount - 1)
        );
    }

    function walletFieldImmutable(field) {
      let afterHasField = request.resource.data.keys().hasAny([field]);
      let beforeHasField = resource.data.keys().hasAny([field]);

      if (!afterHasField && !beforeHasField) {
        return true;
      }

      if (!afterHasField && beforeHasField) {
        return false;
      }

      return request.resource.data[field] == resource.data[field];
    }

    function walletFieldsUnchanged() {
      return walletFieldImmutable('coins')
        && walletFieldImmutable('ownedItems')
        && walletFieldImmutable('equippedItems');
    }

    function fieldUnchanged(field) {
      return !request.resource.data.keys().hasAny([field])
        || request.resource.data[field] == resource.data[field];
    }

    function contactFieldsUnchanged() {
      return fieldUnchanged('email')
        && fieldUnchanged('emailLower')
        && fieldUnchanged('email_lower')
        && fieldUnchanged('emailVerified')
        && fieldUnchanged('phoneNumber')
        && fieldUnchanged('phone_number')
        && fieldUnchanged('phoneNumberVerified')
        && fieldUnchanged('phone_number_verified');
    }

    // Kullanıcı profilleri
    match /users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if (isSignedIn()
          && request.auth.uid == userId
          && walletFieldsUnchanged()
          && contactFieldsUnchanged())
        || isFollowerCountAdjustment(userId);
      allow delete: if false;
    }

    match /users/{userId}/followers/{followerId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
        && request.auth.uid == followerId
        && request.auth.uid != userId
        && request.resource.data.followerId == followerId;
      allow delete: if isSignedIn() && request.auth.uid == followerId;
      allow update: if false;
    }

    match /users/{userId}/following/{followingId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn()
        && request.auth.uid == userId
        && request.resource.data.userId == followingId
        && followingId != userId;
      allow delete: if isSignedIn()
        && request.auth.uid == userId
        && resource.data.userId == followingId;
      allow update: if false;
    }

    // Entry koleksiyonu
    match /cringe_entries/{entryId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Yarışmalar ve diğer herkese açık veriler
    match /competitions/{document=**} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    match /email_otps/{emailId} {
      function otpDataIsValid(data) {
        return data.keys().hasOnly([
              'email',
              'hash',
              'expiresAt',
              'createdAt',
              'lastAttemptAt',
              'attempts'
            ]) &&
          data.email is string &&
          data.email.lower() == data.email &&
          data.email == emailId &&
          data.hash is string &&
          data.expiresAt is timestamp &&
          (!data.keys().hasAny(['attempts']) || (data.attempts is int && data.attempts >= 0)) &&
          (!data.keys().hasAny(['lastAttemptAt']) ||
            data.lastAttemptAt == null || data.lastAttemptAt is timestamp) &&
          (!data.keys().hasAny(['createdAt']) ||
            data.createdAt == null || data.createdAt is timestamp);
      }

      allow create: if otpDataIsValid(request.resource.data);

      allow read: if resource.data.expiresAt is timestamp &&
        request.time <= resource.data.expiresAt + duration.value(1, 'hours');

      allow update: if otpDataIsValid(request.resource.data);

      allow delete: if true;
    }

    match /leaderboard/{document=**} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /trade_proposals/{proposalId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() &&
        (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
    }

    match /user_activity/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    match /auth_logs/{document=**} {
      allow create: if isSignedIn() || request.resource.data.userId == null;
      allow read, update, delete: if false;
    }

    match /settings/{document=**} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /iap_products/{productId} {
      allow read: if true;
      allow write: if false;
    }

    match /purchases/{purchaseId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow write: if false;
    }

    match /wallet_ledger/{eventId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow write: if false;
    }

    match /try_on_sessions/{sessionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow write: if false;
    }

    // Diğer tüm koleksiyonlar için varsayılan
    match /{document=**} {
      allow read: if isSignedIn();
      allow write: if false;
    }
  }
}