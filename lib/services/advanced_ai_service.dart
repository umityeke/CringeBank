import 'dart:convert';
import 'dart:math';
import 'package:dart_openai/dart_openai.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import '../models/cringe_entry.dart';

enum AIProvider { openAI, gemini }

class AdvancedAIService {
  static const String _openAIKey = 'YOUR_OPENAI_API_KEY_HERE';
  static const String _geminiKey = 'YOUR_GEminI_API_KEY_HERE';

  static AIProvider _currentProvider = AIProvider.gemini;
  static GenerativeModel? _geminiModel;

  // Initialize AI services
  static void initialize() {
    // OpenAI setup
    if (_openAIKey.isNotEmpty && _openAIKey != 'YOUR_OPENAI_API_KEY_HERE') {
      OpenAI.apiKey = _openAIKey;
    }

    // Gemini setup
    if (_geminiKey.isNotEmpty && _geminiKey != 'YOUR_GEminI_API_KEY_HERE') {
      _geminiModel = GenerativeModel(model: 'gemini-pro', apiKey: _geminiKey);
    }
  }

  // Ana AI terapi fonksiyonu
  static Future<AITherapyResponse> getAdvancedTherapy({
    required String title,
    required String description,
    required CringeCategory category,
    required double krepLevel,
    required String userHistory,
  }) async {
    try {
      final prompt = _buildTherapyPrompt(
        title: title,
        description: description,
        category: category,
        krepLevel: krepLevel,
        userHistory: userHistory,
      );

      String response;
      if (_currentProvider == AIProvider.openAI &&
          _openAIKey != 'YOUR_OPENAI_API_KEY_HERE') {
        response = await _getOpenAIResponse(prompt);
      } else if (_currentProvider == AIProvider.gemini &&
          _geminiModel != null) {
        response = await _getGeminiResponse(prompt);
      } else {
        // Fallback to mock response
        response = _getMockResponse(title, description, category, krepLevel);
      }

      return _parseAIResponse(response, krepLevel);
    } catch (e) {
      // Debug: 'AI Service Error: \$e'
      return _getFallbackResponse(title, description, category, krepLevel);
    }
  }

  // OpenAI GPT response
  static Future<String> _getOpenAIResponse(String prompt) async {
    final chatCompletion = await OpenAI.instance.chat.create(
      model: "gpt-3.5-turbo",
      messages: [
        OpenAIChatCompletionChoiceMessageModel(
          content: [
            OpenAIChatCompletionChoiceMessageContentItemModel.text(prompt),
          ],
          role: OpenAIChatMessageRole.user,
        ),
      ],
      maxTokens: 500,
      temperature: 0.7,
    );

    return chatCompletion.choices.first.message.content?.first.text ?? '';
  }

  // Google Gemini response
  static Future<String> _getGeminiResponse(String prompt) async {
    if (_geminiModel == null) throw Exception('Gemini model not initialized');

    final response = await _geminiModel!.generateContent([
      Content.text(prompt),
    ]);

    return response.text ?? '';
  }

  // Prompt oluÅŸturma
  static String _buildTherapyPrompt({
    required String title,
    required String description,
    required CringeCategory category,
    required double krepLevel,
    required String userHistory,
  }) {
    return '''
Sen "Dr. Utanmaz" adÄ±nda profesyonel bir psikolog ve terapistsin. TÃ¼rkÃ§e konuÅŸuyorsun ve insanlarÄ±n utanÃ§ verici anlarÄ±yla ilgili terapi yapÄ±yorsun.

KullanÄ±cÄ±nÄ±n Durumu:
- BaÅŸlÄ±k: \$title
- AÃ§Ä±klama: \$description
- Kategori: \${category.displayName}
- UtanÃ§ Seviyesi: \$krepLevel/10
- GeÃ§miÅŸ: \$userHistory

LÃ¼tfen ÅŸu formatta yanÄ±t ver (JSON formatÄ±nda):

{
  "motivationalMessage": "Pozitif ve destekleyici bir mesaj (50-100 kelime)",
  "analysis": "Durumun psikolojik analizi (100-150 kelime)",
  "similarExperience": "Benzer bir deneyim Ã¶rneÄŸi (kÄ±sa)",
  "coping_strategies": ["strateji1", "strateji2", "strateji3"],
  "therapyScore": 75,
  "nextSteps": "Gelecek adÄ±mlar iÃ§in Ã¶neriler",
  "personalizedAdvice": "KiÅŸiye Ã¶zel tavsiyeler"
}

TÃ¼rkÃ§e, samimi, anlayÄ±ÅŸlÄ± ve profesyonel ol. UtanÃ§ duygusunu azaltmaya odaklan.
''';
  }

  // AI response parsing
  static AITherapyResponse _parseAIResponse(String response, double krepLevel) {
    try {
      // JSON parse etmeye Ã§alÄ±ÅŸ
      final jsonResponse = jsonDecode(response);

      return AITherapyResponse(
        motivationalMessage:
            jsonResponse['motivationalMessage'] ?? 'Bu Ã§ok normal bir deneyim!',
        analysis: jsonResponse['analysis'] ?? 'Bu tÃ¼r durumlar herkesle olur.',
        similarExperience:
            jsonResponse['similarExperience'] ??
            'BirÃ§ok insan benzer durumlar yaÅŸar.',
        copingStrategies: List<String>.from(
          jsonResponse['coping_strategies'] ??
              [
                'Derin nefes al ve rahatla',
                'Bu anÄ±n geÃ§ici olduÄŸunu hatÄ±rla',
                'Kendine karÅŸÄ± merhametli ol',
              ],
        ),
        therapyScore:
            (jsonResponse['therapyScore'] as num?)?.toInt() ??
            _calculateTherapyScore(krepLevel),
        nextSteps: jsonResponse['nextSteps'] ?? 'Zamanla bu duygu azalacak.',
        personalizedAdvice:
            jsonResponse['personalizedAdvice'] ??
            'Kendine gÃ¼ven ve ileriye bak.',
        isRealAI: true,
      );
    } catch (e) {
      // JSON parse edilemezse, text olarak iÅŸle
      return _createResponseFromText(response, krepLevel);
    }
  }

  // Text'ten response oluÅŸtur
  static AITherapyResponse _createResponseFromText(
    String text,
    double krepLevel,
  ) {
    final sentences = text.split('.');
    return AITherapyResponse(
      motivationalMessage: sentences.isNotEmpty
          ? sentences[0]
          : 'Bu normal bir durum!',
      analysis: text.length > 200 ? text.substring(0, 200) : text,
      similarExperience: 'BirÃ§ok insan benzer durumlar yaÅŸar.',
      copingStrategies: [
        'Bu anÄ±n geÃ§ici olduÄŸunu hatÄ±rla',
        'Kendine karÅŸÄ± merhametli ol',
        'Derin nefes al ve rahatla',
      ],
      therapyScore: _calculateTherapyScore(krepLevel),
      nextSteps: 'Zamanla bu duygular azalacak.',
      personalizedAdvice: 'Sen harika bir insansÄ±n!',
      isRealAI: true,
    );
  }

  // Mock response (API key yoksa)
  static String _getMockResponse(
    String title,
    String description,
    CringeCategory category,
    double krepLevel,
  ) {
    final mockResponses = [
      'Bu gerÃ§ekten Ã§ok normal bir durum! Herkesin bÃ¶yle anlarÄ± vardÄ±r. Sen kendini Ã§ok suÃ§luyorsun.',
      'Bak, bu tÃ¼r deneyimler aslÄ±nda bizi daha gÃ¼Ã§lÃ¼ yapÄ±yor. Utanacak bir ÅŸey yok.',
      'Bu hikaye aslÄ±nda Ã§ok tatlÄ± ve insani. Ä°nsanlar bu tÃ¼r samimiyeti sever.',
      'GeÃ§miÅŸte kalmÄ±ÅŸ bir ÅŸey iÃ§in kendini bu kadar Ã¼zme. Ileriye odaklan.',
    ];

    mockResponses.shuffle();
    return mockResponses.first;
  }

  // Fallback response
  static AITherapyResponse _getFallbackResponse(
    String title,
    String description,
    CringeCategory category,
    double krepLevel,
  ) {
    return AITherapyResponse(
      motivationalMessage:
          'Bu Ã§ok normal bir deneyim! Herkes bÃ¶yle anlar yaÅŸar, sen yalnÄ±z deÄŸilsin ğŸ’š',
      analysis:
          'Bu tÃ¼r durumlar insan doÄŸasÄ±nÄ±n bir parÃ§asÄ±dÄ±r. MÃ¼kemmel insan yoktur ve hepimiz hata yaparÄ±z. Bu deneyimler bizi daha empatik ve anlayÄ±ÅŸlÄ± yapar.',
      similarExperience:
          'Bir kullanÄ±cÄ± benzer durumda daha da utanÃ§ verici bir deneyim yaÅŸamÄ±ÅŸ. Sen gerÃ§ekten iyi durumdasÄ±n!',
      copingStrategies: [
        'Bu anÄ±n geÃ§ici olduÄŸunu hatÄ±rla',
        'Kendine karÅŸÄ± merhametli ol',
        'Durumu komik bir hikaye olarak gÃ¶r',
        'ArkadaÅŸlarÄ±nla paylaÅŸ, rahatla',
        'Gelecekte nasÄ±l davranacaÄŸÄ±nÄ± planla',
      ],
      therapyScore: _calculateTherapyScore(krepLevel),
      nextSteps:
          'Bu duygularÄ±n zamanla azalacaÄŸÄ±nÄ± bil. Yeni deneyimlerle bu anÄ±yÄ± gÃ¶lgede bÄ±rakacaksÄ±n.',
      personalizedAdvice:
          'Sen cesur bir insansÄ±n Ã§Ã¼nkÃ¼ bu deneyimi paylaÅŸtÄ±n. Bu sana gÃ¼Ã§ verir.',
      isRealAI: false,
    );
  }

  static int _calculateTherapyScore(double krepLevel) {
    // YÃ¼ksek krep = dÃ¼ÅŸÃ¼k terapi puanÄ±
    return max(20, 100 - (krepLevel * 8).round());
  }

  // AI provider deÄŸiÅŸtir
  static void switchProvider(AIProvider provider) {
    _currentProvider = provider;
  }

  // AkÄ±llÄ± krep kategorisi Ã¶nerisi
  static Future<List<String>> getSuggestedCategories(String description) async {
    final keywords = {
      'aÅŸk': CringeCategory.askAcisiKrepligi,
      'sevgili': CringeCategory.askAcisiKrepligi,
      'itiraf': CringeCategory.askAcisiKrepligi,
      'hoca': CringeCategory.fizikselRezillik,
      'okul': CringeCategory.fizikselRezillik,
      'anne': CringeCategory.aileSofrasiFelaketi,
      'baba': CringeCategory.aileSofrasiFelaketi,
      'aile': CringeCategory.aileSofrasiFelaketi,
      'instagram': CringeCategory.sosyalMedyaIntihari,
      'story': CringeCategory.sosyalMedyaIntihari,
      'mesaj': CringeCategory.sosyalMedyaIntihari,
      'iÅŸ': CringeCategory.isGorusmesiKatliam,
      'patron': CringeCategory.isGorusmesiKatliam,
      'toplantÄ±': CringeCategory.isGorusmesiKatliam,
      'dÃ¼ÅŸ': CringeCategory.fizikselRezillik,
      'osur': CringeCategory.fizikselRezillik,
    };

    final suggestions = <String>[];
    final lowerDesc = description.toLowerCase();

    for (final entry in keywords.entries) {
      if (lowerDesc.contains(entry.key)) {
        suggestions.add(entry.value.displayName);
      }
    }

    return suggestions.isEmpty ? ['Fiziksel Rezillik'] : suggestions;
  }

  // GÃ¼nlÃ¼k motivasyon mesajlarÄ± (AI ile)
  static Future<String> getDailyMotivation() async {
    try {
      final prompt = '''
KÄ±sa, pozitif, TÃ¼rkÃ§e bir gÃ¼nlÃ¼k motivasyon mesajÄ± yaz. 
UtanÃ§ duygularÄ±yla baÅŸa Ã§Ä±kmak ve kendini kabul etmek hakkÄ±nda olsun.
Maksimum 25 kelime. Emoji kullan.
''';

      if (_currentProvider == AIProvider.gemini && _geminiModel != null) {
        final response = await _getGeminiResponse(prompt);
        return response.isNotEmpty ? response : _getDefaultMotivation();
      }

      return _getDefaultMotivation();
    } catch (e) {
      return _getDefaultMotivation();
    }
  }

  static String _getDefaultMotivation() {
    final motivations = [
      'BugÃ¼n kendine karÅŸÄ± daha merhametli ol ğŸ’–',
      'MÃ¼kemmel olmak zorunda deÄŸilsin, sadece insan ol âœ¨',
      'Her hata bir Ã¶ÄŸrenme fÄ±rsatÄ±dÄ±r ğŸŒ±',
      'Cesaretin iÃ§in kendini tebrik et! ğŸ’ª',
      'Sen yeterli ve deÄŸerlisin ğŸŒŸ',
    ];
    motivations.shuffle();
    return motivations.first;
  }
}

class AITherapyResponse {
  final String motivationalMessage;
  final String analysis;
  final String similarExperience;
  final List<String> copingStrategies;
  final int therapyScore;
  final String nextSteps;
  final String personalizedAdvice;
  final bool isRealAI;

  AITherapyResponse({
    required this.motivationalMessage,
    required this.analysis,
    required this.similarExperience,
    required this.copingStrategies,
    required this.therapyScore,
    required this.nextSteps,
    required this.personalizedAdvice,
    required this.isRealAI,
  });

  Map<String, dynamic> toJson() {
    return {
      'motivationalMessage': motivationalMessage,
      'analysis': analysis,
      'similarExperience': similarExperience,
      'copingStrategies': copingStrategies,
      'therapyScore': therapyScore,
      'nextSteps': nextSteps,
      'personalizedAdvice': personalizedAdvice,
      'isRealAI': isRealAI,
    };
  }
}
