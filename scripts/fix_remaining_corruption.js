const fs = require('fs');
const path = require('path');

// Bozuk karakter ve doÄŸru karÅŸÄ±lÄ±klarÄ±
const replacements = [
  // Avatar emoji dÃ¼zeltmeleri - Ã¶nce Ã¶zel durumlar
  { pattern: /'ÄŸ''/g, replacement: "'ðŸ‘¤'" },
  
  // Ã–zel durumlar - emoji parÃ§alarÄ± ve garbled text
  { pattern: /ettiâ€žÅ¸in/g, replacement: 'ettiÄŸin' },
  { pattern: /baÄŸlayabilirsin/g, replacement: 'baÅŸlayabilirsin' },
  { pattern: /release â€ '/g, replacement: "release â†’" },
  
  // YaygÄ±n kelime ve hece dÃ¼zeltmeleri (case-insensitive)
  { pattern: /aldÄ±ÄŸÄ±n/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'AldÄ±ÄŸÄ±n' : 'aldÄ±ÄŸÄ±n' },
  { pattern: /alÄ±namaz/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'AlÄ±namaz' : 'alÄ±namaz' },
  { pattern: /analiz/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Analiz' : 'analiz' },
  { pattern: /ayrÄ±lmalÄ±sÄ±n/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'AyrÄ±lmalÄ±sÄ±n' : 'ayrÄ±lmalÄ±sÄ±n' },
  { pattern: /baÄŸlanmÄ±ÅŸ/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'BaÄŸlanmÄ±ÅŸ' : 'baÄŸlanmÄ±ÅŸ' },
  { pattern: /baÄŸlÄ±/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'BaÄŸlÄ±' : 'baÄŸlÄ±' },
  { pattern: /baÅŸarÄ±yla/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'BaÅŸarÄ±yla' : 'baÅŸarÄ±yla' },
  { pattern: /baÅŸlayabilirsin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'BaÅŸlayabilirsin' : 'baÅŸlayabilirsin' },
  { pattern: /baÅŸlÄ±ÄŸÄ±/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'BaÅŸlÄ±ÄŸÄ±' : 'baÅŸlÄ±ÄŸÄ±' },
  { pattern: /beÄŸeni/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'BeÄŸeni' : 'beÄŸeni' },
  { pattern: /benzersiz/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Benzersiz' : 'benzersiz' },
  { pattern: /birine/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Birine' : 'birine' },
  { pattern: /borsa/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Borsa' : 'borsa' },
  { pattern: /deÄŸeri/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'DeÄŸeri' : 'deÄŸeri' },
  { pattern: /deÄŸilsin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'DeÄŸilsin' : 'deÄŸilsin' },
  { pattern: /deÄŸiÅŸiklik/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'DeÄŸiÅŸiklik' : 'deÄŸiÅŸiklik' },
  { pattern: /deneyin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Deneyin' : 'deneyin' },
  { pattern: /desteÄŸi/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'DesteÄŸi' : 'desteÄŸi' },
  { pattern: /diÄŸer/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'DiÄŸer' : 'diÄŸer' },
  { pattern: /dokunarak/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Dokunarak' : 'dokunarak' },
  { pattern: /dÃ¼zenle/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'DÃ¼zenle' : 'dÃ¼zenle' },
  { pattern: /ediliyor/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ediliyor' : 'ediliyor' },
  { pattern: /efektleri/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Efektleri' : 'efektleri' },
  { pattern: /emin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Emin' : 'emin' },
  { pattern: /eriÅŸim/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'EriÅŸim' : 'eriÅŸim' },
  { pattern: /ettiÄŸim/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'EttiÄŸim' : 'ettiÄŸim' },
  { pattern: /ettiÄŸin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'EttiÄŸin' : 'ettiÄŸin' },
  { pattern: /fark ettim/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Fark ettim' : 'fark ettim' },
  { pattern: /fiziksel/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Fiziksel' : 'fiziksel' },
  { pattern: /fotoÄŸraf/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'FotoÄŸraf' : 'fotoÄŸraf' },
  { pattern: /geri/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Geri' : 'geri' },
  { pattern: /giriÅŸ/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'GiriÅŸ' : 'giriÅŸ' },
  { pattern: /gÃ¶ndererek/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'GÃ¶ndererek' : 'gÃ¶ndererek' },
  { pattern: /gÃ¶ster/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'GÃ¶ster' : 'gÃ¶ster' },
  { pattern: /hemen/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Hemen' : 'hemen' },
  { pattern: /iÃ§eriÄŸin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ä°Ã§eriÄŸin' : 'iÃ§eriÄŸin' },
  { pattern: /iÃ§in/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ä°Ã§in' : 'iÃ§in' },
  { pattern: /iÅŸlem/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ä°ÅŸlem' : 'iÅŸlem' },
  { pattern: /isteÄŸe/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ä°steÄŸe' : 'isteÄŸe' },
  { pattern: /istediÄŸin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ä°stediÄŸin' : 'istediÄŸin' },
  { pattern: /istediÄŸinizden/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ä°stediÄŸinizden' : 'istediÄŸinizden' },
  { pattern: /kalsÄ±n/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'KalsÄ±n' : 'kalsÄ±n' },
  { pattern: /katÄ±ldÄ±ÄŸÄ±n/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'KatÄ±ldÄ±ÄŸÄ±n' : 'katÄ±ldÄ±ÄŸÄ±n' },
  { pattern: /kaydedilemedi/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Kaydedilemedi' : 'kaydedilemedi' },
  { pattern: /kayÄ±tlÄ±/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'KayÄ±tlÄ±' : 'kayÄ±tlÄ±' },
  { pattern: /kimliÄŸi/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'KimliÄŸi' : 'kimliÄŸi' },
  { pattern: /kontrol/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Kontrol' : 'kontrol' },
  { pattern: /korunacak/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Korunacak' : 'korunacak' },
  { pattern: /krepi/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Krepi' : 'krepi' },
  { pattern: /krepin/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Krepin' : 'krepin' },
  { pattern: /kullan/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Kullan' : 'kullan' },
  { pattern: /kullanÄ±cÄ±lar/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'KullanÄ±cÄ±lar' : 'kullanÄ±cÄ±lar' },
  { pattern: /mesaj/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Mesaj' : 'mesaj' },
  { pattern: /mesajlaÄŸma/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'MesajlaÅŸma' : 'mesajlaÅŸma' },
  { pattern: /mevcut/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Mevcut' : 'mevcut' },
  { pattern: /olduÄŸunu/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'OlduÄŸunu' : 'olduÄŸunu' },
  { pattern: /olmadÄ±ÄŸÄ±nÄ±/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'OlmadÄ±ÄŸÄ±nÄ±' : 'olmadÄ±ÄŸÄ±nÄ±' },
  { pattern: /onayladÄ±ÄŸÄ±nda/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'OnayladÄ±ÄŸÄ±nda' : 'onayladÄ±ÄŸÄ±nda' },
  { pattern: /Ã¶nce/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ã–nce' : 'Ã¶nce' },
  { pattern: /paylaÅŸ/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'PaylaÅŸ' : 'paylaÅŸ' },
  { pattern: /profilinde/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Profilinde' : 'profilinde' },
  { pattern: /resim/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Resim' : 'resim' },
  { pattern: /satÄ±ÄŸÄ±/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'SatÄ±ÅŸÄ±' : 'satÄ±ÅŸÄ±' },
  { pattern: /satÄ±n/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'SatÄ±n' : 'satÄ±n' },
  { pattern: /seÃ§ili/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'SeÃ§ili' : 'seÃ§ili' },
  { pattern: /seÃ§in/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'SeÃ§in' : 'seÃ§in' },
  { pattern: /silmek/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Silmek' : 'silmek' },
  { pattern: /sipariÅŸ/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'SipariÅŸ' : 'sipariÅŸ' },
  { pattern: /sonra/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Sonra' : 'sonra' },
  { pattern: /takip/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Takip' : 'takip' },
  { pattern: /tekrar/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Tekrar' : 'tekrar' },
  { pattern: /tertemiz/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Tertemiz' : 'tertemiz' },
  { pattern: /topluluÄŸa/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'TopluluÄŸa' : 'topluluÄŸa' },
  { pattern: /Ã¼rÃ¼ne/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'ÃœrÃ¼ne' : 'Ã¼rÃ¼ne' },
  { pattern: /uyumluluÄŸu/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'UyumluluÄŸu' : 'uyumluluÄŸu' },
  { pattern: /yalnÄ±zken/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'YalnÄ±zken' : 'yalnÄ±zken' },
  { pattern: /yansÄ±yacaktÄ±r/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'YansÄ±yacaktÄ±r' : 'yansÄ±yacaktÄ±r' },
  { pattern: /yaparak/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Yaparak' : 'yaparak' },
  { pattern: /yarÄ±ÅŸma/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'YarÄ±ÅŸma' : 'yarÄ±ÅŸma' },
  { pattern: /yorum/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Yorum' : 'yorum' },
  
  // Composite patterns
  { pattern: /Ã§oklu/gi, replacement: match => match[0] === match[0].toUpperCase() ? 'Ã‡oklu' : 'Ã§oklu' },
];

function fixFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    for (const { pattern, replacement } of replacements) {
      const before = content;
      content = content.replace(pattern, replacement);
      if (content !== before) {
        modified = true;
      }
    }
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`âœ“ Fixed: ${filePath}`);
      return true;
    }
    return false;
  } catch (err) {
    console.error(`âœ— Error fixing ${filePath}:`, err.message);
    return false;
  }
}

function walkDir(dir, fileCallback) {
  const files = fs.readdirSync(dir);
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      if (!['build', 'node_modules', '.git', '.dart_tool'].includes(file)) {
        walkDir(filePath, fileCallback);
      }
    } else if (file.endsWith('.dart')) {
      fileCallback(filePath);
    }
  });
}

// Ana Ã§alÄ±ÅŸtÄ±rma
const libDir = path.join(__dirname, '..', 'lib');
let fixedCount = 0;

console.log('ðŸ”§ Kalan bozuk karakterleri dÃ¼zeltiliyor...\n');
walkDir(libDir, (filePath) => {
  if (fixFile(filePath)) {
    fixedCount++;
  }
});

console.log(`\nâœ¨ TamamlandÄ±! ${fixedCount} dosya dÃ¼zeltildi.`);
